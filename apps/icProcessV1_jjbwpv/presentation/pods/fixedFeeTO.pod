{
  "podId": "fixedFeeTO",
  "seed": {
    "parameters": [
      "renderSection"
    ],
    "template": {
      "type": "fieldSet",
      "title": "Fixed Fee Details",
      "id": "fixedFeeDetails",
      "render": "<% @@renderSection@@ %>",
      "children": [
        {
          "type": "instanceList",
          "label": "BRG Matter / Project",
          "id": "brgMatterFF",
          "required": "true",
          "helpText": "Please add IC to conflict check",
          "guide": {
            "type": "guide",
            "text": "Please add IC to conflict check"
          },
          "onChange": "<% 
                    if(!empty self.value){
                      var projDetail = getProjectDetails.invoke({'proj': self.value[0]});
                      clientOrMatterNameFF.setValues([projDetail.data[0].customerAsWorktag]);
                      clientOrMatterNameFF.setValue([projDetail.data[0].customerAsWorktag.id]);
                    } else {
                      clientOrMatterNameFF.setValues([]);
                      clientOrMatterNameFF.setValue([]);
                    }
                   %>",
          "values": "<% [] %>",
          "idKey": "id",
          "displayKey": "descriptor",
          "valuesOut": [
            {
              "valueOutBinding": "createTaskOrder.brgMatter.id",
              "value": "<% self.value[0] ?? null %>"
            }
          ],
          "searchEndPoint": "<% endpoints.searchProj %>",
          "searchResultValues": "<% searchProj.data %>",
          "view": "true",
          "relatedTask": "true"
        },
        {
          "type": "text",
          "enabled": "false",
          "value": "Please add IC to conflict check."
        },
        {
          "type": "instanceList",
          "label": "Client Or Matter Name",
          "id": "clientOrMatterNameFF",
          "enabled": "false",
          "helpText": "EL should be signed & matter activated before IC begins work",
          "guide": {
            "type": "guide",
            "text": "EL should be signed & matter activated before IC begins work"
          },
          "values": "<% getCustomers.data ?? [] %>",
          "idKey": "id",
          "displayKey": "descriptor",
          "valuesOut": [
            {
              "valueOutBinding": "createTaskOrder.clientOrMatterName.id",
              "value": "<% self.value[0] ?? null %>"
            }
          ],
          "view": "true",
          "relatedTask": "true"
        },
        {
          "type": "text",
          "enabled": "false",
          "value": "EL should be signed & matter activated before IC begins work."
        },
        {
          "type": "textArea",
          "label": "Description Of Services For This Specific Project",
          "id": "descriptionOfServicesForThisSpecificProjectFF",
          "required": "true",
          "valuesOut": [
            {
              "valueOutBinding": "createTaskOrder.descriptionOfServicesForThisSpecificProject",
              "value": "<% self.value %>"
            }
          ]
        },
        {
          "type": "date",
          "label": "First Date Of Work",
          "id": "firstDateOfWorkFF",
          "required": "true",
          "valuesOut": [
            {
              "valueOutBinding": "createTaskOrder.firstDateOfWork",
              "value": "<% self.value %>"
            }
          ],
          "datePrecision": "DAY",
          "dateFormat": "yyyy-MM-dd"
        },
        {
          "type": "textArea",
          "label": "Schedule of Work",
          "id": "workSchedFF",
          "required": "true",
          "valuesOut": [
            {
              "valueOutBinding": "createTaskOrder.scheduleOfWork",
              "value": "<% self.value %>"
            }
          ]
        },
        {
          "type": "dropdown",
          "label": "Type Of Payment",
          "id": "typeOfPaymentFF",
          "required": "true",
          "helpText": "Payment 'upon receipt of invoice' =  15th of the month after services are provided and invoice is received (ex. June services are paid July 15th) VS 'after collections' = 15th of the month after BRG has billed and collected payment from the client (ex. June collections are paid July 15th).",
          "guide": {
            "type": "guide",
            "text": "Payment 'upon receipt of invoice' =  15th of the month after services are provided and invoice is received (ex. June services are paid July 15th) VS 'after collections' = 15th of the month after BRG has billed and collected payment from the client (ex. June collections are paid July 15th)."
          },
          "values": "<% getPaymentTypes.data %>",
          "idKey": "id",
          "displayKey": "descriptor",
          "valuesOut": [
            {
              "valueOutBinding": "createTaskOrder.typeOfPayment.id",
              "value": "<% self.value[0] ?? null %>"
            }
          ]
        },
        {
          "type": "text",
          "enabled": "false",
          "value": "Payment 'upon receipt of invoice' =  15th of the month after services are provided and invoice is received (ex. June services are paid July 15th) VS 'after collections' = 15th of the month after BRG has billed and collected payment from the client (ex. June collections are paid July 15th)."
        },
        {
          "type": "textArea",
          "label": "Description of Deliverables",
          "id": "deliverablesFF",
          "required": "true",
          "helpText": "Description of Deliverables is required when paying an IC a fixed fee amount.",
          "guide": {
            "type": "guide",
            "text": "Description of Deliverables is required when paying an IC a fixed fee amount."
          },
          "valuesOut": [
            {
              "valueOutBinding": "createTaskOrder.deliverables",
              "value": "<% self.value %>"
            }
          ]
        },
        {
          "type": "text",
          "enabled": "false",
          "value": "Description of Deliverables is required when paying an IC a fixed fee amount."
        },
        {
          "type": "textArea",
          "label": "Additional Details if Applicable",
          "id": "additionalDetailsFF",
          "required": "true",
          "valuesOut": [
            {
              "valueOutBinding": "createTaskOrder.additionalDetails",
              "value": "<% self.value %>"
            }
          ]
        },
        {
          "type": "textArea",
          "label": "Notes/Other Terms and Conditions",
          "id": "otherTermsFF",
          "required": "true",
          "valuesOut": [
            {
              "valueOutBinding": "createTaskOrder.otherTermsAndConditions",
              "value": "<% self.value %>"
            }
          ]
        },
        {
          "type": "checkBox",
          "label": "Reqesting IC Exception Policy for GM Calculations ",
          "id": "reqICExceptionFF",
          "valuesOut": [
            {
              "valueOutBinding": "createTaskOrder.requestingIcExceptionPolicyForGmCalculations",
              "value": "<% self.value %>"
            }
          ]
        },
        {
          "type": "fieldSet",
          "title": "Pay Amount for Each Installment (if applicable)",
          "horizontal": true,
          "id": "installmentAmtFF",
          "children": [
            {
              "type": "currency",
              "label": "Amount",
              "id": "installAmtFF",
              "valueOutBinding": "createTaskOrder.payAmountForEachInstallment.value",
              "currencyCode": "USD"
            },
            {
              "type": "dropdown",
              "label": "Currency",
              "id": "installCurrFF",
              "values": "<% allCurrencies.items %>",
              "idKey": "Currency_ID",
              "displayKey": "Currency_ID",
              "selectedValues": "<% ['USD'] %>",
              "valuesOut": [
                {
                  "valueOutBinding": "createTaskOrder.payAmountForEachInstallment.currency",
                  "value": "<% !empty installAmtFF.value ? self.value[0] : null %>"
                }
              ]
            }
          ]
        },
        {
          "type": "panelList",
          "label": "ICs",
          "id": "icPanelListFF",
          "children": [
            {
              "type": "instanceList",
              "label": "Existing IC",
              "id": "existingICFF",
              "required": "false",
              "onChange": "<% 
                        if(!empty self.value){
                          var cw = cwDetail.invoke({'cw': self.value[0]}).data[0];
                          fNameFF.value = cw?.firstName;
                          fNameFF.setEnabled(false);
                          lNameFF.value = cw?.lastName;
                          lNameFF.setEnabled(false);
                          icEmailFF.value = cw?.primaryEmailAddress;
                          icEmailFF.setEnabled(false);
                          icCountryFF.setValues(!empty cw.primaryHomeAddress?.country ? [cw.primaryHomeAddress.country] :[] );
                          icCountryFF.setValue(!empty cw.primaryHomeAddress?.country ? [cw.primaryHomeAddress.country.id] :[] );
                          icCountryFF.setEnabled(false);
                          icAddressLine1FF.value = cw?.primaryHomeAddress?.addressLine1;
                          icAddressLine1FF.setEnabled(false);
                          icAddressLine2FF.value = cw?.primaryHomeAddress?.addressLine2;
                          icAddressLine2FF.setEnabled(false);
                          icCityFF.value = cw?.primaryHomeAddress?.city;
                          icCityFF.setEnabled(false);
                          icCountryRegionFF.setValues(!empty cw.primaryHomeAddress?.countryRegion1 ? [cw.primaryHomeAddress.countryRegion1] :[] );
                          icCountryRegionFF.setValue(!empty cw.primaryHomeAddress?.countryRegion1 ? [cw.primaryHomeAddress.countryRegion1.id] :[] );
                          icCountryRegionFF.setEnabled(false);
                          const title = getBrgBillingTitles.data.find(x => {x.name == cw.businessTitle});
                          if(!empty title){ billingTitleFF.setValue([title.id]); }
                        } else {
                            fNameFF.value = '';
                            fNameFF.setEnabled(true);
                            lNameFF.value = '';
                            lNameFF.setEnabled(true);
                            icEmailFF.value = '';
                            icEmailFF.setEnabled(true);
                            icCountryFF.setValues(list:mapAttribute(countriesGET.data ?? [], 'country'));
                            icCountryFF.setValue([]);
                            icCountryFF.setEnabled(true);
                            icAddressLine1FF.value = '';
                            icAddressLine1FF.setEnabled(true);
                            icAddressLine2FF.value = '';
                            icAddressLine2FF.setEnabled(true);
                            icCityFF.value = '';
                            icCityFF.setEnabled(true);
                            icCountryRegionFF.setValues([]);
                            icCountryRegionFF.setValue([]);
                            icCountryRegionFF.setEnabled(false);
                            billingTitleFF.setValue([]);
                        }
                       %>",
              "values": "<% [] %>",
              "displayKey": "worker.descriptor",
              "valueOutBinding": "createICDetail.data[].ic.id",
              "searchEndPoint": "<% endpoints.searchCW %>",
              "searchResultValues": "<% searchCW.data %>",
              "view": "true",
              "relatedTask": "true"
            },
            {
              "type": "section",
              "horizontal": true,
              "id": "nameSecFF",
              "children": [
                {
                  "type": "text",
                  "label": "First Name",
                  "id": "fNameFF",
                  "required": "true",
                  "onChange": "<%
                            if(!empty self.value && !empty lNameFF.value){
                              var cwMatch = searchCW.invoke({'first': self.value, 'last': lNameFF.value, 'email': icEmailFF?.value});
                              //debug.value = json:asJSON(cwMatch.data);
                              if(!empty cwMatch.data){
                                icMatchGridFF.setVisible(true);
                                icMatchGridFF.setRows(cwMatch.data);
                              }
                            }  
                           %>",
                  "valueOutBinding": "createICDetail.data[].icFirstName"
                },
                {
                  "type": "text",
                  "label": "Last Name",
                  "id": "lNameFF",
                  "required": "true",
                  "onChange": "<%
                            if(!empty self.value && !empty fNameFF.value){
                              var cwMatch = searchCW.invoke({'first': fNameFF.value, 'last': self.value, 'email': icEmailFF?.value});
                              //debug.value = json:asJSON(cwMatch.data);
                              if(!empty cwMatch.data){
                                icMatchGridFF.setVisible(true);
                                icMatchGridFF.setRows(cwMatch.data);
                              }
                            }  
                           %>",
                  "valueOutBinding": "createICDetail.data[].icLastName"
                },
                {
                  "type": "text",
                  "label": "Email Address",
                  "id": "icEmailFF",
                  "required": "true",
                  "onChange": "<%
                            if(!empty self.value){
                              if(!validate:match('^([a-zA-Z0-9.]+)@([a-zA-Z0-9.]+).([a-zA-Z]{2,5})$',self.value)){
                                self.setError('Enter a valid email format');
                              } else {
                                self.clearError();
                                var cwMatch = searchCW.invoke({'email': self.value, 'first': fNameNoTO?.value, 'last': lNameNoTO?.value});
                                //debug.value = json:asJSON(cwMatch.data);
                                if(!empty cwMatch.data){
                                  icMatchGridFF.setVisible(true);
                                  icMatchGridFF.setRows(cwMatch.data);
                                }
                              }
                            } else {
                              self.clearError();
                            }
                           %>",
                  "valueOutBinding": "createICDetail.data[].icEmail"
                }
              ]
            },
            {
              "type": "grid",
              "label": "IC Match Potentials",
              "id": "icMatchGridFF",
              "visible": "false",
              "columns": [
                {
                  "type": "column",
                  "label": "Use Match",
                  "columnId": "useMatchColFF",
                  "cellTemplate": {
                    "type": "fieldSet",
                    "children": [
                      {
                        "type": "hidden",
                        "id": "hrICInstanceFF",
                        "value": "<% {'id': row?.id, 'worker': {'descriptor': row?.descriptor}} %>"
                      },
                      {
                        "type": "pageActionButton",
                        "label": "Use This Match",
                        "id": "useThisMatchFF",
                        "onClick": "<%
                                  existingICFF.setValues(!empty hrICInstanceFF.value ? [hrICInstanceFF.value] : []);
                                  existingICFF.setValue(!empty hrICInstanceFF.value ? [hrICInstanceFF.value.id] : []);
                                  const cw = cwDetail.invoke({'cw': hrICInstanceFF?.value?.id}).data[0];
                                  fNameFF.value = cw?.firstName;
                                  fNameFF.setEnabled(false);
                                  lNameFF.value = cw?.lastName;
                                  lNameFF.setEnabled(false);
                                  icEmailFF.value = cw?.primaryEmailAddress;
                                  icEmailFF.setEnabled(false);
                                  icCountryFF.setValues(!empty cw.primaryHomeAddress?.country ? [cw.primaryHomeAddress.country] :[] );
                                  icCountryFF.setValue(!empty cw.primaryHomeAddress?.country ? [cw.primaryHomeAddress.country.id] :[] );
                                  icCountryFF.setEnabled(false);
                                  icAddressLine1FF.value = cw?.primaryHomeAddress?.addressLine1;
                                  icAddressLine1FF.setEnabled(false);
                                  icAddressLine2FF.value = cw?.primaryHomeAddress?.addressLine2;
                                  icAddressLine2FF.setEnabled(false);
                                  icCityFF.value = cw?.primaryHomeAddress?.city;
                                  icCityFF.setEnabled(false);
                                  icCountryRegionFF.setValues(!empty cw.primaryHomeAddress?.countryRegion1 ? [cw.primaryHomeAddress.countryRegion1] :[] );
                                  icCountryRegionFF.setValue(!empty cw.primaryHomeAddress?.countryRegion1 ? [cw.primaryHomeAddress.countryRegion1.id] :[] );
                                  icCountryRegionFF.setEnabled(false);
                                  const title = getBrgBillingTitles.data.find(x => {x.name == cw.businessTitle});
                                  if(!empty title){ billingTitleFF.setValue([title.id]); }
                                  %>",
                        "visible": "true"
                      }
                    ]
                  }
                },
                {
                  "type": "column",
                  "label": "Existing IC",
                  "columnId": "existingICColFF",
                  "cellTemplate": {
                    "type": "text",
                    "id": "icDescriptorFF",
                    "enabled": "false",
                    "value": "<% row?.descriptor %>"
                  }
                },
                {
                  "type": "column",
                  "label": "Business Title",
                  "columnId": "busTitleColFF",
                  "cellTemplate": {
                    "type": "text",
                    "id": "busTitleFF",
                    "enabled": "false",
                    "value": "<% row?.businessTitle %>"
                  }
                }
              ],
              "rows": "<% [] %>",
              "rowVariableName": "row",
              "doNotAdd": "true",
              "doNotRemove": "true",
              "doNotPutInTab": true,
              "configurable": true
            },
            {
              "type": "fieldSet",
              "title": "Contact Info",
              "horizontal": true,
              "id": "contactFSFF",
              "children": [
                {
                  "type": "checkBox",
                  "label": "Use Supplier Contact Info",
                  "id": "useSuppContactFF",
                  "onChange": "<% 
                    if(!empty self.value && self.value){
                      addrSec1FF.setVisible(false);
                      addrSec2FF.setVisible(false);
                    } else {
                      addrSec1FF.setVisible(true);
                      addrSec2FF.setVisible(true);
                    }
                   %>",
                  "value": "true"
                },
                {
                  "type": "section",
                  "id": "addrSec1FF",
                  "visible": "false",
                  "children": [
                    {
                      "type": "instanceList",
                      "label": "Country",
                      "id": "icCountryFF",
                      "onChange": "<%
                            if (!empty(self.value)){
                              var countryData = countriesGET.data.find(x => {x.country.id == self.value[0]});
                              var thisCountryRegions = countryData.countryRegions ?? [];
                              if (!empty(thisCountryRegions)){
                                icCountryRegionFF.setValues(thisCountryRegions);
                                if (thisCountryRegions.size() == 1){
                                  icCountryRegionFF.setValue([thisCountryRegions[0].id]);
                                  icCountryRegionFF.setEnabled(false);
                                } else {
                                  icCountryRegionFF.setValue([]);
                                  icCountryRegionFF.setEnabled(true);
                                }
                              } else {
                                icCountryRegionFF.setValues([]);
                                icCountryRegionFF.setValue([]);
                                icCountryRegionFF.setEnabled(false);
                              }
                            } else {
                              icCountryRegionFF.setValues([]);
                              icCountryRegionFF.setValue([]);
                              icCountryRegionFF.setEnabled(false);
                            }
                          %>",
                      "values": "<% list:mapAttribute(countriesGET.data ?? [], 'country') %>",
                      "valueOutBinding": "createICDetail.data[].icCountry.id",
                      "view": "true",
                      "relatedTask": "true"
                    },
                    {
                      "type": "text",
                      "label": "Address Line 1",
                      "id": "icAddressLine1FF",
                      "valueOutBinding": "createICDetail.data[].icAddressLine1"
                    },
                    {
                      "type": "text",
                      "label": "Address Line 2",
                      "id": "icAddressLine2FF",
                      "valueOutBinding": "createICDetail.data[].icAddressLine2"
                    }
                  ]
                },
                {
                  "type": "section",
                  "id": "addrSec2FF",
                  "visible": "false",
                  "children": [
                    {
                      "type": "text",
                      "label": "City",
                      "id": "icCityFF",
                      "valueOutBinding": "createICDetail.data[].icCity"
                    },
                    {
                      "type": "instanceList",
                      "label": "Country Region",
                      "id": "icCountryRegionFF",
                      "enabled": "false",
                      "values": "<% [] %>",
                      "valueOutBinding": "createICDetail.data[].icCountryRegion.id",
                      "view": "true",
                      "relatedTask": "true"
                    }
                  ]
                }
              ]
            },
            {
              "type": "section",
              "id": "icDetailSecFF",
              "children": [
                {
                  "type": "fieldSet",
                  "horizontal": true,
                  "id": "itFSFF",
                  "children": [
                    {
                      "type": "checkBox",
                      "label": "Additional Technology Requirements",
                      "id": "needsEmailLaptopFF",
                      "onChange": "<%
                                if(!empty self.value && self.value){
                                  emailLaptopDescFF.setVisible(true);
                                  emailLaptopDescFF.setRequired(true);
                                  self.setWarning('In rare cases when BRG laptop and/or email is required, additonial technology assignment charges will be applied to the Contingent Worker/Supplier for these additional resources.  Legal approval will be required for any requests.');
                                } else {
                                  emailLaptopDescFF.setVisible(false);
                                  emailLaptopDescFF.setRequired(false);
                                  self.clearWarning();
                                }
                                         %>",
                      "valueOutBinding": "createICDetail.data[].requiresBRGEmailAndOrLaptop"
                    },
                    {
                      "type": "textArea",
                      "label": "Explain what IT is needed",
                      "id": "emailLaptopDescFF",
                      "visible": "false",
                      "valueOutBinding": "createICDetail.data[].brgEmailOrLaptopReason"
                    }
                  ]
                },
                {
                  "type": "instanceList",
                  "label": "BRG Office",
                  "id": "brgOfficeFF",
                  "required": "true",
                  "helpText": "Is the IC associated with a specific BRG office for business purposes?",
                  "guide": {
                    "type": "guide",
                    "text": "Is the IC associated with a specific BRG office for business purposes?"
                  },
                  "values": "<% getOffices.data ?? [] %>",
                  "selectedValues": "<% ['55a39a865c6d1000d4337dcfc84f0000'] %>",
                  "valueOutBinding": "createICDetail.data[].brgOffice.id",
                  "view": "true",
                  "relatedTask": "true"
                },
                {
                  "type": "text",
                  "enabled": "false",
                  "value": "Is the IC associated with a specific BRG office for business purposes?"
                },
                {
                  "type": "instanceList",
                  "label": "Designated BRG Billing Title",
                  "id": "billingTitleFF",
                  "required": "true",
                  "helpText": "The BRG accounting system requires that each individual have a BRG-equivalent billing title, one that is appropriate to the work they are doing and their client bill rate.",
                  "guide": {
                    "type": "guide",
                    "text": "The BRG accounting system requires that each individual have a BRG-equivalent billing title, one that is appropriate to the work they are doing and their client bill rate."
                  },
                  "values": "<% getBrgBillingTitles.data?? [] %>",
                  "displayKey": "name",
                  "valueOutBinding": "createICDetail.data[].brgBillingTitle.id",
                  "view": "true",
                  "relatedTask": "true"
                },
                {
                  "type": "text",
                  "enabled": "false",
                  "value": "The BRG accounting system requires that each individual have a BRG-equivalent billing title, one that is appropriate to the work they are doing and their client bill rate."
                }
              ]
            },
            {
              "type": "section",
              "title": "Total Pay",
              "horizontal": true,
              "id": "totalPaySecFF",
              "children": [
                {
                  "type": "currency",
                  "label": "Amount",
                  "id": "totPayAmountFF",
                  "required": "true",
                  "valueOutBinding": "createICDetail.data[].totalPayAmount.value",
                  "currencyCode": "USD"
                },
                {
                  "type": "dropdown",
                  "label": "Currency",
                  "id": "totPayCurrencyFF",
                  "required": "true",
                  "values": "<% allCurrencies.items %>",
                  "idKey": "Currency_ID",
                  "displayKey": "Currency_ID",
                  "selectedValues": "<% ['USD'] %>",
                  "valueOutBinding": "createICDetail.data[].totalPayAmount.currency"
                }
              ]
            },
            {
              "type": "section",
              "title": "Total Bill Amount to Client for IC's Work",
              "horizontal": true,
              "id": "totalPaySecFF",
              "children": [
                {
                  "type": "currency",
                  "label": "Amount",
                  "id": "totBillAmountFF",
                  "required": "true",
                  "valueOutBinding": "createICDetail.data[].totalBillAmountToClientForIcsWork.value",
                  "currencyCode": "USD"
                },
                {
                  "type": "dropdown",
                  "label": "Currency",
                  "id": "totBillCurrencyFF",
                  "required": "true",
                  "values": "<% allCurrencies.items %>",
                  "idKey": "Currency_ID",
                  "displayKey": "Currency_ID",
                  "selectedValues": "<% ['USD'] %>",
                  "valueOutBinding": "createICDetail.data[].totalBillAmountToClientForIcsWork.currency"
                }
              ]
            }
          ],
          "minimumRows": "1",
          "isArrayOutBinding": "true",
          "panelName": "ic",
          "indexVariableName": "i",
          "doNotPutInTab": true,
          "initializeFirstPanel": "true"
        }
      ]
    }
  }
}