{
  "podId": "monthlyRetainerTO",
  "seed": {
    "parameters": [
      "renderSection"
    ],
    "template": {
      "type": "fieldSet",
      "title": "Monthly Retainer Details",
      "id": "monthlyRetainer",
      "render": "<% @@renderSection@@ %>",
      "children": [
        {
          "type": "instanceList",
          "label": "Existing IC",
          "id": "existingICMr",
          "required": "false",
          "onChange": "<% 
                        if(!empty self.value){
                          var cw = cwDetail.invoke({'cw': self.value[0]}).data[0];
                          fNameMr.value = cw?.firstName;
                          fNameMr.setEnabled(false);
                          lNameMr.value = cw?.lastName;
                          lNameMr.setEnabled(false);
                          icEmailMr.value = cw?.primaryEmailAddress;
                          icEmailMr.setEnabled(false);
                          icCountryMr.setValues(!empty cw.primaryHomeAddress?.country ? [cw.primaryHomeAddress.country] :[] );
                          icCountryMr.setValue(!empty cw.primaryHomeAddress?.country ? [cw.primaryHomeAddress.country.id] :[] );
                          icCountryMr.setEnabled(false);
                          icAddressLine1Mr.value = cw?.primaryHomeAddress?.addressLine1;
                          icAddressLine1Mr.setEnabled(false);
                          icAddressLine2Mr.value = cw?.primaryHomeAddress?.addressLine2;
                          icAddressLine2Mr.setEnabled(false);
                          icCityMr.value = cw?.primaryHomeAddress?.city;
                          icCityMr.setEnabled(false);
                          icCountryRegionMr.setValues(!empty cw.primaryHomeAddress?.countryRegion1 ? [cw.primaryHomeAddress.countryRegion1] :[] );
                          icCountryRegionMr.setValue(!empty cw.primaryHomeAddress?.countryRegion1 ? [cw.primaryHomeAddress.countryRegion1.id] :[] );
                          icCountryRegionMr.setEnabled(false);
                          const title = getBrgBillingTitles.data.find(x => {x.name == cw.businessTitle});
                          if(!empty title){ billingTitleMr.setValue([title.id]); }
                        } else {
                            fNameMr.value = '';
                            fNameMr.setEnabled(true);
                            lNameMr.value = '';
                            lNameMr.setEnabled(true);
                            icEmailMr.value = '';
                            icEmailMr.setEnabled(true);
                            icCountryMr.setValues(list:mapAttribute(countriesGET.data ?? [], 'country'));
                            icCountryMr.setValue([]);
                            icCountryMr.setEnabled(true);
                            icAddressLine1Mr.value = '';
                            icAddressLine1Mr.setEnabled(true);
                            icAddressLine2Mr.value = '';
                            icAddressLine2Mr.setEnabled(true);
                            icCityMr.value = '';
                            icCityMr.setEnabled(true);
                            icCountryRegionMr.setValues([]);
                            icCountryRegionMr.setValue([]);
                            icCountryRegionMr.setEnabled(false);
                            billingTitleMr.setValue([]);
                        }
                       %>",
          "values": "<% [] %>",
          "displayKey": "worker.descriptor",
          "valueOutBinding": "createICDetail.data[].ic.id",
          "searchEndPoint": "<% endpoints.searchCW %>",
          "searchResultValues": "<% searchCW.data %>",
          "view": "true",
          "relatedTask": "true"
        },
        {
          "type": "section",
          "horizontal": true,
          "id": "nameSecMr",
          "children": [
            {
              "type": "text",
              "label": "First Name",
              "id": "fNameMr",
              "required": "true",
              "onChange": "<%
                            if(!empty self.value && !empty lNameMr.value){
                              var cwMatch = searchCW.invoke({'first': self.value, 'last': lNameMr.value, 'email': icEmailMr?.value});
                              //debug.value = json:asJSON(cwMatch.data);
                              if(!empty cwMatch.data){
                                icMatchGridMr.setVisible(true);
                                icMatchGridMr.setRows(cwMatch.data);
                              }
                            }  
                           %>",
              "valueOutBinding": "createICDetail.data[].icFirstName"
            },
            {
              "type": "text",
              "label": "Last Name",
              "id": "lNameMr",
              "required": "true",
              "onChange": "<%
                            if(!empty self.value && !empty fNameMr.value){
                              var cwMatch = searchCW.invoke({'first': fNameMr.value, 'last': self.value, 'email': icEmailMr?.value});
                              //debug.value = json:asJSON(cwMatch.data);
                              if(!empty cwMatch.data){
                                icMatchGridMr.setVisible(true);
                                icMatchGridMr.setRows(cwMatch.data);
                              }
                            }  
                           %>",
              "valueOutBinding": "createICDetail.data[].icLastName"
            },
            {
              "type": "text",
              "label": "Email Address",
              "id": "icEmailMr",
              "required": "true",
              "onChange": "<%
                            if(!empty self.value){
                              if(!validate:match('^([a-zA-Z0-9.]+)@([a-zA-Z0-9.]+).([a-zA-Z]{2,5})$',self.value)){
                                self.setError('Enter a valid email format');
                              } else {
                                self.clearError();
                                var cwMatch = searchCW.invoke({'email': self.value, 'first': fNameMr?.value, 'last': lNameMr?.value});
                                //debug.value = json:asJSON(cwMatch.data);
                                if(!empty cwMatch.data){
                                  icMatchGridMr.setVisible(true);
                                  icMatchGridMr.setRows(cwMatch.data);
                                }
                              }
                            } else {
                              self.clearError();
                            }
                           %>",
              "valueOutBinding": "createICDetail.data[].icEmail"
            }
          ]
        },
        {
          "type": "grid",
          "label": "IC Match Potentials",
          "id": "icMatchGridMr",
          "visible": "false",
          "columns": [
            {
              "type": "column",
              "label": "Use Match",
              "columnId": "useMatchColMr",
              "cellTemplate": {
                "type": "fieldSet",
                "children": [
                  {
                    "type": "hidden",
                    "id": "hrICInstanceMr",
                    "value": "<% {'id': row?.id, 'worker': {'descriptor': row?.descriptor}} %>"
                  },
                  {
                    "type": "pageActionButton",
                    "label": "Use This Match",
                    "id": "useThisMatchMr",
                    "onClick": "<%
                                  existingICMr.setValues(!empty hrICInstanceFF.value ? [hrICInstanceFF.value] : []);
                                  existingICMr.setValue(!empty hrICInstanceFF.value ? [hrICInstanceFF.value.id] : []);
                                  const cw = cwDetail.invoke({'cw': hrICInstanceFF?.value?.id}).data[0];
                                  fNameMr.value = cw?.firstName;
                                  fNameMr.setEnabled(false);
                                  lNameMr.value = cw?.lastName;
                                  lNameMr.setEnabled(false);
                                  icEmailMr.value = cw?.primaryEmailAddress;
                                  icEmailMr.setEnabled(false);
                                  icCountryMr.setValues(!empty cw.primaryHomeAddress?.country ? [cw.primaryHomeAddress.country] :[] );
                                  icCountryMr.setValue(!empty cw.primaryHomeAddress?.country ? [cw.primaryHomeAddress.country.id] :[] );
                                  icCountryMr.setEnabled(false);
                                  icAddressLine1Mr.value = cw?.primaryHomeAddress?.addressLine1;
                                  icAddressLine1Mr.setEnabled(false);
                                  icAddressLine2Mr.value = cw?.primaryHomeAddress?.addressLine2;
                                  icAddressLine2Mr.setEnabled(false);
                                  icCityMr.value = cw?.primaryHomeAddress?.city;
                                  icCityMr.setEnabled(false);
                                  icCountryRegionMr.setValues(!empty cw.primaryHomeAddress?.countryRegion1 ? [cw.primaryHomeAddress.countryRegion1] :[] );
                                  icCountryRegionMr.setValue(!empty cw.primaryHomeAddress?.countryRegion1 ? [cw.primaryHomeAddress.countryRegion1.id] :[] );
                                  icCountryRegionMr.setEnabled(false);
                                  const title = getBrgBillingTitles.data.find(x => {x.name == cw.businessTitle});
                                  if(!empty title){ billingTitleMr.setValue([title.id]); }
                                  %>",
                    "visible": "true"
                  }
                ]
              }
            },
            {
              "type": "column",
              "label": "Existing IC",
              "columnId": "existingICColMrF",
              "cellTemplate": {
                "type": "text",
                "id": "icDescriptorMr",
                "enabled": "false",
                "value": "<% row?.descriptor %>"
              }
            },
            {
              "type": "column",
              "label": "Business Title",
              "columnId": "busTitleColMr",
              "cellTemplate": {
                "type": "text",
                "id": "busTitleMr",
                "enabled": "false",
                "value": "<% row?.businessTitle %>"
              }
            }
          ],
          "rows": "<% [] %>",
          "rowVariableName": "row",
          "doNotAdd": "true",
          "doNotRemove": "true",
          "doNotPutInTab": true,
          "configurable": true
        },
        {
          "type": "fieldSet",
          "title": "Contact Info",
          "horizontal": true,
          "id": "contactFSMr",
          "children": [
            {
              "type": "checkBox",
              "label": "Use Supplier Contact Info",
              "id": "useSuppContactMr",
              "onChange": "<% 
                    if(!empty self.value && self.value){
                      addrSec1Mr.setVisible(false);
                      addrSec2Mr.setVisible(false);
                    } else {
                      addrSec1Mr.setVisible(true);
                      addrSec2Mr.setVisible(true);
                    }
                   %>",
              "value": "true"
            },
            {
              "type": "section",
              "id": "addrSec1Mr",
              "visible": "false",
              "children": [
                {
                  "type": "instanceList",
                  "label": "Country",
                  "id": "icCountryMr",
                  "onChange": "<%
                            if (!empty(self.value)){
                              var countryData = countriesGET.data.find(x => {x.country.id == self.value[0]});
                              var thisCountryRegions = countryData.countryRegions ?? [];
                              if (!empty(thisCountryRegions)){
                                icCountryRegionMr.setValues(thisCountryRegions);
                                if (thisCountryRegions.size() == 1){
                                  icCountryRegionMr.setValue([thisCountryRegions[0].id]);
                                  icCountryRegionMr.setEnabled(false);
                                } else {
                                  icCountryRegionMr.setValue([]);
                                  icCountryRegionMr.setEnabled(true);
                                }
                              } else {
                                icCountryRegionMr.setValues([]);
                                icCountryRegionMr.setValue([]);
                                icCountryRegionMr.setEnabled(false);
                              }
                            } else {
                              icCountryRegionMr.setValues([]);
                              icCountryRegionMr.setValue([]);
                              icCountryRegionMr.setEnabled(false);
                            }
                          %>",
                  "values": "<% list:mapAttribute(countriesGET.data ?? [], 'country') %>",
                  "valueOutBinding": "createICDetail.data[].icCountry.id",
                  "view": "true",
                  "relatedTask": "true"
                },
                {
                  "type": "text",
                  "label": "Address Line 1",
                  "id": "icAddressLine1Mr",
                  "valueOutBinding": "createICDetail.data[].icAddressLine1"
                },
                {
                  "type": "text",
                  "label": "Address Line 2",
                  "id": "icAddressLine2Mr",
                  "valueOutBinding": "createICDetail.data[].icAddressLine2"
                }
              ]
            },
            {
              "type": "section",
              "id": "addrSec2Mr",
              "visible": "false",
              "children": [
                {
                  "type": "text",
                  "label": "City",
                  "id": "icCityMr",
                  "valueOutBinding": "createICDetail.data[].icCity"
                },
                {
                  "type": "instanceList",
                  "label": "Country Region",
                  "id": "icCountryRegionMr",
                  "enabled": "false",
                  "values": "<% [] %>",
                  "valueOutBinding": "createICDetail.data[].icCountryRegion.id",
                  "view": "true",
                  "relatedTask": "true"
                }
              ]
            }
          ]
        },
        {
          "type": "date",
          "label": "Start Date",
          "id": "monthlyRetainerStartDate",
          "required": "true",
          "valueOutBinding": "createTaskOrder.firstDateOfWork",
          "datePrecision": "DAY"
        },
        {
          "type": "date",
          "label": "End Date",
          "id": "monthlyRetainerEndDate",
          "required": "true",
          "valueOutBinding": "createTaskOrder.endDate",
          "datePrecision": "DAY"
        },
        {
          "type": "currency",
          "label": "Monthly Payment Amount",
          "id": "monthlyPaymentAmountMr",
          "required": "true",
          "valueOutBinding": "createICDetail.data[].monthlyPaymentAmount.value",
          "currencyCode": "USD"
        },
        {
          "type": "dropdown",
          "label": "Monthly Payment Currency",
          "id": "monthlyCurrency",
          "required": "true",
          "values": "<% allCurrencies.items %>",
          "idKey": "Currency_ID",
          "displayKey": "Currency_ID",
          "selectedValues": "<% ['USD'] %>",
          "valueOutBinding": "createICDetail.data[].monthlyPaymentAmount.currency"
        },
        {
          "type": "instanceList",
          "label": "Practice Group/BU Taking on Cost",
          "id": "practiceGroupMr",
          "required": "true",
          "values": "<% 
            if(!empty initiatorDetail){
              if(!empty initiatorDetail.data[0]?.cf_CF_WorkersBusinessUnitLO){
                return [initiatorDetail.data[0].cf_CF_WorkersBusinessUnitLO];
              } else {
                return[] 
              }
            } else {
              return [];
            }
            //!empty initiatorDetail ? [initiatorDetail.data[0].cf_CF_WorkersBusinessUnitLO] : [] 
          %>",
          "valueOutBinding": "createIcOrganizationDetail.brgBusinessUnit.id",
          "selectedValuesAndDescriptors": "<% 
            if(!empty initiatorDetail){
              if(!empty initiatorDetail?.data[0]?.cf_CF_WorkersBusinessUnitLO){
                return [initiatorDetail.data[0].cf_CF_WorkersBusinessUnitLO];
              } else {
                return[] 
              }
            } else {
              return [];
            }
            //!empty initiatorDetail ? [initiatorDetail.data[0].cf_CF_WorkersBusinessUnitLO.id] : [] 
          %>",
          "searchEndPoint": "<% endpoints.searchBU%>",
          "searchResultValues": "<% searchBU.data %>",
          "view": "true",
          "relatedTask": "true"
        },
        {
          "type": "text",
          "label": "Additional Fees/Bonus",
          "id": "monthlyRetainerAdditionalFeesBonus",
          "required": "true",
          "valueOutBinding": "createICDetail.data[].additionalFeesBonus"
        },
        {
          "type": "textArea",
          "label": "Reason for IC",
          "id": "monthlyRetainerReason",
          "required": "true",
          "valueOutBinding": "createICDetail.data[].reasonForThisIC"
        },
        {
          "type": "instanceList",
          "label": "Designated BRG Billing Title",
          "id": "billingTitleMr",
          "required": "true",
          "values": "<% getBrgBillingTitles.data?? [] %>",
          "displayKey": "name",
          "valueOutBinding": "createICDetail.data[].brgBillingTitle.id",
          "view": "true",
          "relatedTask": "true"
        },
        {
          "type": "currency",
          "label": "Hourly Bill Rate",
          "id": "hourlyBillRateMr",
          "required": "true",
          "valueOutBinding": "createICDetail.data[].hourlyClientBillRate.value",
          "currencyCode": "USD"
        },
        {
          "type": "dropdown",
          "label": "Bill Rate Currency",
          "id": "billRateCurrency",
          "required": "true",
          "values": "<% allCurrencies.items %>",
          "idKey": "Currency_ID",
          "displayKey": "Currency_ID",
          "selectedValues": "<% ['USD'] %>",
          "valueOutBinding": "createICDetail.data[].hourlyClientBillRate.currency"
        },
        {
          "type": "checkBox",
          "label": "Exclusive to BRG?",
          "id": "exclusiveToBRGMr",
          "valueOutBinding": "createICDetail.data[].exclusiveToBRG"
        },
        {
          "type": "checkBox",
          "label": "Non-standard IT requirements?",
          "id": "needBrgLaptopOrEmailMr",
          "onChange": "<%
                    if (self.value) {
                      brgLaptopOrEmailReasonMr.setVisible(true);
                      brgLaptopOrEmailReasonMr.setRequired(true);
                      self.setWarning('Additional IT requirements will incur additional charges');
                    } else {
                      brgLaptopOrEmailReasonMr.setVisible(false);
                      brgLaptopOrEmailReasonMr.setRequired(false);
                      self.clearWarning();
                    }
                  %>",
          "valueOutBinding": "createICDetail.data[].requiresBRGEmailAndOrLaptop"
        },
        {
          "type": "textArea",
          "label": "Explain what IT is needed",
          "id": "brgLaptopOrEmailReasonMr",
          "visible": "false",
          "valueOutBinding": "createICDetail.data[].brgEmailOrLaptopReason"
        },
        {
          "type": "instanceList",
          "label": "BRG Office",
          "id": "brgOfficeMr",
          "required": "true",
          "values": "<% getOffices.data ?? [] %>",
          "selectedValues": "<% ['55a39a865c6d1000d4337dcfc84f0000'] %>",
          "valueOutBinding": "createICDetail.data[].brgOffice.id",
          "view": "true",
          "relatedTask": "true"
        }
      ]
    }
  }
}